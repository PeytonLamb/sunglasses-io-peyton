swagger: "2.0"
info:
  version: '2.0'
  title: 'Sunglasses Store API'
  description: "API for managing brands, products, user authentication, and user's cart"
host: 'localhost:3000'
schemes:
  - http
basePath: /api
produces:
  - application/json
paths:
  /brands:
    get:
      summary: Retrieve all brands
      responses:
        200:
          description: List of 
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
/brands/{id}/products:
    get:
      summary: "Get products by brand ID"
      parameters:
        - name: id
          in: path
          description: "The ID of the brand to get products for"
          required: true
          type: string
      responses:
        '200':
          description: 'Products retrieved successfully'
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /products:
    get:
      summary: Retrieve all products
      responses:
        200:
          description: 'Successfully retrieved products'
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
  /login:
    post:
      summary: Authenticate user
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: username
          in: formData
          required: true
          type: string
        - name: password
          in: formData
          required: true
          type: string
      responses:
        200:
          description: Successful authentication
        401:
          description: Unauthorized
  /me/cart:
    get:
      summary: "Get user cart"
      responses:
        200:
          description: "List of items in cart"
          schema:
            type: array
            items:
              $ref: "#/definitions/Cart"
  /me/cart:
    post:
      summary: "Add product to cart"
      description: "Add product to the cart"
      parameters:
        - name: body
          in: body
          description: "Product to add to cart"
          required: true
          schema:
            $ref: "#/definitions/Product"
  /me/cart/{productId}:
    delete:
      summary: "Delete item from cart"
      description: "Remove item from the cart"
      parameters:
        - name: productId
          in: path
          description: "ID of item to remove"
          required: true
          type: string
  /me/cart/{productId}:
    post:
      summary: "Change amount of item in cart"
      description: "Update the amount of item in cart"
      parameters:
        - name: productId
          in: path
          description: "ID of product to update in cart"
          required: true
          type: string
        - name: body
          in: body
          description: "New quantity value for product in cart"
          required: true
          schema:
            type: object
            properties:
              quantity:
                type: integer
                description: "New amount of product in cart"
definitions:
  Brand:
    type: object
    properties:
      id:
        type: integer
      brand:
        type: string
        description: brand name
  Product:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
        description: name of product
      brand:  
        type: string
        description: brand of product
      price:
        type: number
  User:
    type: object
    properties:
    first_name:
    type: string
    description:  first name of user
      last_name:
        type: string
        description: last name of user
      email:
        type: string
        description: email address of user
  Cart: 
    type: array
  Error:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string
      fields:
        type: string